AWSTemplateFormatVersion: "2010-09-09"
Description: "Designing_DataLakes_Kinesis_Exercise"

Parameters:
  IngestionStreamName:
    Description: "Firehose Ingestion Steam name to configure kinesis agent in EC2 Instance"
    Type: String
    Default: web-log-ingestion-stream

  OpenSearchDomainName:
    Description: "Domain name for OpenSearch Domain resource"
    Type: String
    Default: web-log-summary

  OpenSearchAdminPassword:
    Description: "Password to use for the admin user in the OpenSearch domain"
    Type: String
    NoEcho: true

  OpenSearchIndexName:
    Description: "Index name to use in data sent to open search domain"
    Type: String
    Default: request_data

Resources:
  ProducerStack:
    Type: AWS::CloudFormation::Stack
    Properties:
      # make sure to use package command for this to be resolved into a valid s3 url
      TemplateURL: ./producer-stack.yml
      Parameters:
        IngestionStreamName: !Ref IngestionStreamName

  OpenSearchDomain:
    Type: AWS::OpenSearchService::Domain
    Properties:
      DomainName: !Ref OpenSearchDomainName
      EngineVersion: OpenSearch_2.3
      ClusterConfig:
        InstanceCount: 1
        InstanceType: m5.large.search
      EBSOptions:
        EBSEnabled: true
        VolumeSize: 10
      EncryptionAtRestOptions:
        Enabled: true
      NodeToNodeEncryptionOptions:
        Enabled: true
      DomainEndpointOptions:
        EnforceHTTPS: true
      AdvancedSecurityOptions:
        Enabled: true
        InternalUserDatabaseEnabled: true
        MasterUserOptions:
          MasterUserName: admin
          MasterUserPassword: !Ref OpenSearchAdminPassword
      AccessPolicies:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              AWS:
                - "*"
            Action:
              - es:*
            Resource: !Sub 
              - arn:aws:es:${region}:${accountId}:domain/${domain_name}/*
              - region: !Ref AWS::Region
                accountId: !Ref AWS::AccountId
                domain_name: !Ref OpenSearchDomainName

  RawLogsBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub web-log-raw-${AWS::Region}-${AWS::AccountId}

  IngestionStreamRole: 
    Type: AWS::IAM::Role
    Properties:
      RoleName: ingestion-stream-role
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: firehose.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: firehose-put-s3
          PolicyDocument: 
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - s3:AbortMultipartUpload
                  - s3:GetBucketLocation
                  - s3:GetObject
                  - s3:ListBucket
                  - s3:ListBucketMultipartUploads
                  - s3:PutObject
                  - s3:PutObjectAcl
                Resource:
                  - !GetAtt RawLogsBucket.Arn
                  - !Join 
                    - /
                    - - !GetAtt RawLogsBucket.Arn
                      - "*"

  IngestionStream:
    Type: AWS::KinesisFirehose::DeliveryStream
    Properties:
      DeliveryStreamName: !Ref IngestionStreamName
      DeliveryStreamType: DirectPut
      S3DestinationConfiguration:
        BucketARN: !GetAtt RawLogsBucket.Arn
        RoleARN: !GetAtt IngestionStreamRole.Arn

  AggregatedDataStreamRole: 
    Type: AWS::IAM::Role
    Properties:
      RoleName: aggregated-data-stream-role
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: firehose.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: firehose-put-opensearch
          PolicyDocument: 
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - s3:AbortMultipartUpload
                  - s3:GetBucketLocation
                  - s3:GetObject
                  - s3:ListBucket
                  - s3:ListBucketMultipartUploads
                  - s3:PutObject
                  - s3:PutObjectAcl
                Resource:
                  - !GetAtt RawLogsBucket.Arn
                  - !Join 
                    - /
                    - - !GetAtt RawLogsBucket.Arn
                      - "*"
              - Effect: Allow
                Action:
                  - es:DescribeDomain
                  - es:DescribeDomains
                  - es:DescribeDomainConfig
                  - es:ESHttpPost
                  - es:ESHttpPut
                Resource:
                  - !GetAtt OpenSearchDomain.Arn
                  - !Sub
                    - "${domainArn}/*"
                    - domainArn: !GetAtt OpenSearchDomain.Arn
              - Effect: Allow
                Action:
                  - es:ESHttpGet
                Resource:
                  - !Sub
                    - "${domainArn}/_all/_settings"
                    - domainArn: !GetAtt OpenSearchDomain.Arn
                  - !Sub
                    - "${domainArn}/_cluster/stats"
                    - domainArn: !GetAtt OpenSearchDomain.Arn
                  - !Sub
                    - "${domainArn}/${indexName}*/_mapping/*"
                    - domainArn: !GetAtt OpenSearchDomain.Arn
                      indexName: !Ref OpenSearchIndexName
                  - !Sub
                    - "${domainArn}/_nodes"
                    - domainArn: !GetAtt OpenSearchDomain.Arn
                  - !Sub
                    - "${domainArn}/_nodes/stats"
                    - domainArn: !GetAtt OpenSearchDomain.Arn
                  - !Sub
                    - "${domainArn}/_nodes/*/stats"
                    - domainArn: !GetAtt OpenSearchDomain.Arn
                  - !Sub
                    - "${domainArn}/stats"
                    - domainArn: !GetAtt OpenSearchDomain.Arn
                  - !Sub
                    - "${domainArn}/${indexName}*/stats"
                    - domainArn: !GetAtt OpenSearchDomain.Arn
                      indexName: !Ref OpenSearchIndexName

  OpenSearchErrorsBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub web-log-aggregated-errors-${AWS::Region}-${AWS::AccountId}

  AggregatedDataStream:
    Type: AWS::KinesisFirehose::DeliveryStream
    Properties:
      DeliveryStreamName: web-log-aggregated-data
      DeliveryStreamType: DirectPut
      ElasticsearchDestinationConfiguration:
        DomainARN: !GetAtt OpenSearchDomain.Arn
        IndexName: !Ref OpenSearchIndexName
        RoleARN: !GetAtt AggregatedDataStreamRole.Arn
        S3Configuration:
          BucketARN: !GetAtt OpenSearchErrorsBucket.Arn
          RoleARN: !GetAtt AggregatedDataStreamRole.Arn
          BufferingHints:
            IntervalInSeconds: 60
            SizeInMBs: 1

  AggregationAppRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: web-log-aggregation-app-role
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: kinesisanalytics.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: kinesisanalytics-read-ingestion-firehose
          PolicyDocument:  
            Version: "2012-10-17"
            Statement:
              Effect: Allow
              Action:
                - firehose:DescribeDeliveryStream
                - firehose:Get*
              Resource:
                - !GetAtt IngestionStream.Arn
        - PolicyName: kinesisanalytics-write-aggregated-firehose
          PolicyDocument:  
            Version: "2012-10-17"
            Statement:
              Effect: Allow
              Action:
                - firehose:DescribeDeliveryStream
                - firehose:PutRecord
                - firehose:PutRecordBatch
              Resource:
                - !GetAtt AggregatedDataStream.Arn
          
  AggregationApp:
    Type: AWS::KinesisAnalytics::Application
    Properties:
      ApplicationName: web-log-aggregation-app
      Inputs:
        - NamePrefix: SOURCE_SQL_STREAM
          InputSchema:
              RecordColumns:
                - Name: host
                  SqlType: VARCHAR(16)
                  Mapping: "$.host"
                - Name: datetime
                  SqlType: VARCHAR(32)
                  Mapping: "$.datetime"
                - Name: request
                  SqlType: VARCHAR(64)
                  Mapping: "$.request"
                - Name: response
                  SqlType: integer
                  Mapping: "$.response"
                - Name: bytes
                  SqlType: integer
                  Mapping: "$.bytes"
              RecordFormat:
                  RecordFormatType: JSON
                  MappingParameters:
                    JSONMappingParameters:
                      RecordRowPath: "$"
          KinesisFirehoseInput:
            ResourceARN: !GetAtt IngestionStream.Arn
            RoleARN: !GetAtt AggregationAppRole.Arn
      ApplicationCode: |
        CREATE OR REPLACE STREAM "DESTINATION_SQL_STREAM"
          (datetime TIMESTAMP, status INTEGER, statusCount INTEGER);

        CREATE OR REPLACE PUMP "STREAM_PUMP" AS INSERT INTO "DESTINATION_SQL_STREAM"
        SELECT STREAM ROWTIME as datetime, "response" as status, COUNT(*) AS statusCount
        FROM "SOURCE_SQL_STREAM_001"
        GROUP BY "response",
        FLOOR(("SOURCE_SQL_STREAM_001".ROWTIME - TIMESTAMP '1970-01-01 00:00:00') minute / 1 TO MINUTE);

  AggregationAppOutput:
    Type: AWS::KinesisAnalytics::ApplicationOutput
    Properties:
      ApplicationName: !Ref AggregationApp
      Output:
        DestinationSchema:
          RecordFormatType: JSON
        KinesisFirehoseOutput:
          ResourceARN: !GetAtt AggregatedDataStream.Arn
          RoleARN: !GetAtt AggregationAppRole.Arn
        Name: DESTINATION_SQL_STREAM
