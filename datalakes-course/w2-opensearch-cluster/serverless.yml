service: sensor-ingestion

frameworkVersion: '3'

provider:
  name: aws
  runtime: python3.9

custom:
  pythonRequirements:
    dockerizePip: non-linux
    slim: true
    noDeploy:
      - boto3

# exclude everything by default
package:
  individually: true
  patterns:
    - '!**/*'

functions:
  upload-data:
    name: ${self:service}-${sls:stage}-upload-data
    handler: upload_data.handler
    module: upload_data
    role: LambdaESS3Role
    environment:
      S3_BUCKET: !Ref DatalakeBucket
      ES_DOMAIN_URL: !Sub
        - https://${endpoint}
        - endpoint: !GetAtt OpenSearchDomain.DomainEndpoint
    package:
      patterns:
        - upload_data/upload_data.py
    events:
      - http:
          method: POST
          path: /
          integration: lambda
          request:
            template:
              application/json: "$input.json('$')"

resources:
  Resources:
    LambdaESS3Role:
      Type: AWS::IAM::Role
      Properties:
        RoleName: ${self:service}-${sls:stage}-upload-role
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action: sts:AssumeRole
        ManagedPolicyArns:
          - arn:aws:iam::aws:policy/AmazonS3FullAccess
          - arn:aws:iam::aws:policy/AmazonESFullAccess

    DatalakeBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:service}-${sls:stage}-datalake
      
    DatalakePolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket: !Ref DatalakeBucket
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Principal:
                AWS: !GetAtt LambdaESS3Role.Arn
              Action: s3:*
              Resource: !Sub
                - ${bucket_arn}/*
                - bucket_arn: !GetAtt DatalakeBucket.Arn

    OpenSearchDomain:
      Type: AWS::OpenSearchService::Domain
      Properties:
        DomainName: ${self:service}-${sls:stage}-domain
        EngineVersion: OpenSearch_2.3
        ClusterConfig:
          InstanceCount: 1
          InstanceType: t3.small.search
        EBSOptions:
          EBSEnabled: true
          VolumeSize: 10
        AccessPolicies:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Principal:
                AWS: "*"
              Action: es:*
              Resource: !Sub 
                - aws:arn:es:${region}:${accountId}:domain/${domain_name}/*
                - region: ${aws:region}
                  accountId: ${aws:accountId}
                  domain_name: ${self:service}-${sls:stage}-domain
              Condition: 
                IpAddress:
                  aws:SourceIp:
                    - ${file(./secret.yml):ipv4}
            - Effect: Allow
              Principal:
                AWS: !GetAtt LambdaESS3Role.Arn
              Action: es:*
              Resource: !Sub 
              - aws:arn:es:${region}:${accountId}:domain/${domain_name}/*
              - region: ${aws:region}
                accountId: ${aws:accountId}
                domain_name: ${self:service}-${sls:stage}-domain

plugins:
  - serverless-python-requirements
