service: backend-poc

frameworkVersion: '3'

provider:
  name: aws
  runtime: python3.9

# exclude everything by default
package:
  individually: true
  patterns:
    - '!**/*'

functions:
  store:
    runtime: python3.9
    handler: functions/store.lambda_handler
    role: LambdaSQSDynamoDBRole
    package: 
      patterns:
        - functions/store.py
    events:
      - sqs: 
          arn: !GetAtt OrdersQueue.Arn

  notify:
    runtime: python3.9
    handler: functions/notify.lambda_handler
    role: LambdaDynamoDBStreamsSNSRole
    package:
      patterns:
        - functions/notify.py
    environment:
      TOPIC_ARN: !GetAtt OrderCreatedSNSTopic.TopicArn
    events:
      - stream:
          type: dynamodb
          arn: !GetAtt OrdersDynamoDBTable.StreamArn

resources:
  Resources:
    # Roles
    LambdaSQSDynamoDBRole:
      Type: AWS::IAM::Role
      Properties: 
        RoleName: Lambda-SQS-DynamoDB
        AssumeRolePolicyDocument: 
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action:
                - 'sts:AssumeRole'
        Policies:
          - PolicyName: Lambda-Write-DynamoDB
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
              - Effect: Allow
                Action:
                - dynamodb:PutItem
                - dynamodb:DescribeTable
                Resource: "*"
          - PolicyName: Lambda-Read-SQS
            PolicyDocument: 
              Version: '2012-10-17'
              Statement:
              - Effect: Allow
                Action:
                - sqs:DeleteMessage
                - sqs:ReceiveMessage
                - sqs:GetQueueAttributes
                - sqs:ChangeMessageVisibility
                Resource: "*"
    
    LambdaDynamoDBStreamsSNSRole:
      Type: AWS::IAM::Role
      Properties: 
        RoleName: Lambda-DynamoDBStreams-SNS
        AssumeRolePolicyDocument: 
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action:
                - 'sts:AssumeRole'
        Policies:
          - PolicyName: Lambda-DynamoDBStreams-Read
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
              - Effect: Allow
                Action:
                - dynamodb:GetShardIterator
                - dynamodb:DescribeStream
                - dynamodb:ListStreams
                - dynamodb:GetRecords
                Resource: "*"
          - PolicyName: Lambda-SNS-Publish
            PolicyDocument: 
              Version: '2012-10-17'
              Statement:
              - Effect: Allow
                Action:
                - sns:Publish
                - sns:GetTopicAttributes
                - sns:ListTopics
                Resource: "*"

    APIGatewaySQSRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: APIGateway-SQS
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Sid: ''
            Effect: Allow
            Principal:
              Service:
              - apigateway.amazonaws.com
            Action:
            - sts:AssumeRole
        ManagedPolicyArns:
          - arn:aws:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs

    # DynamoDB Table
    OrdersDynamoDBTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: orders
        AttributeDefinitions:
          - AttributeName: orderID
            AttributeType: S
        KeySchema:
          - AttributeName: orderID
            KeyType: HASH
        BillingMode: PROVISIONED
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5
        StreamSpecification:
          StreamViewType: NEW_IMAGE

    # SQS Queue
    OrdersQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: orders-queue
    
    OrdersQueuePolicy:
      Type: AWS::SQS::QueuePolicy
      Properties:
        Queues:
          - !Ref OrdersQueue
        PolicyDocument:
          Statement:
            - Effect: Allow
              Action:
                - sqs:DeleteMessage
                - sqs:ReceiveMessage
                - sqs:GetQueueAttributes
                - sqs:ChangeMessageVisibility
              Principal:
                AWS: !GetAtt LambdaSQSDynamoDBRole.Arn
              Resource: !GetAtt OrdersQueue.Arn
            - Effect: Allow
              Action:
                - sqs:SendMessage
              Principal: 
                AWS: !GetAtt APIGatewaySQSRole.Arn
              Resource: !GetAtt OrdersQueue.Arn

    OrderCreatedSNSTopic:
      Type: AWS::SNS::Topic
      Properties:
        TopicName: order-created-topic
        Subscription: 
          - Endpoint: ${file(./secret.yml):email}
            Protocol: email

    # Rest API
    RestApi:
      Type: AWS::ApiGateway::RestApi
      Properties:
        Name: orders-api

    PostOrderAPIMethod:
      Type: AWS::ApiGateway::Method
      Properties:
        RestApiId: !Ref RestApi
        ResourceId: !GetAtt RestApi.RootResourceId
        HttpMethod: POST
        AuthorizationType: NONE
        Integration:
          Type: AWS
          Credentials: !GetAtt APIGatewaySQSRole.Arn
          IntegrationHttpMethod: POST
          Uri: !Join
            - ''
            - - 'arn:aws:apigateway:'
              - ${aws:region}
              - ':sqs:path/'
              - ${aws:accountId}
              - /
              - !GetAtt OrdersQueue.QueueName
          RequestParameters:
            integration.request.header.Content-Type: '''application/x-www-form-urlencoded'''
          RequestTemplates:
            application/json: Action=SendMessage&MessageBody=$input.body
          PassthroughBehavior: NEVER
          IntegrationResponses:
            - StatusCode: '200'
        MethodResponses:
          - StatusCode: '200'

    ApiDeployment:
      Type: AWS::ApiGateway::Deployment
      Properties:
        RestApiId: !Ref RestApi

    ApiStage:
      Type: AWS::ApiGateway::Stage
      Properties:
        RestApiId: !Ref RestApi
        DeploymentId: !Ref ApiDeployment
        StageName: ${sls:stage}
  
  Outputs:
    Endpoint: 
      Value: !Sub
      - https://${api_id}.execute-api.${region}.amazonaws.com/${stage}
      - api_id: !Ref RestApi
        region: ${aws:region}
        stage: !Ref ApiStage
