service: analytics-poc

provider:
  name: aws
  runtime: python3.9

package:
  individually: true
  patterns:
    - "!**/**"

functions:
  transform:
    handler: functions/format.lambda_handler
    name: transform-data
    description: Add newline at the end of records
    timeout: 10
    package: 
      patterns:
        - "functions/format.py"

resources:
  Resources:
    # Role for API Gateway Integration with Firehose
    ApiGatewayFirehoseRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: ApiGateway-Firehose
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Principal:
                Service: apigateway.amazonaws.com
              Action:
                - sts:AssumeRole
        Policies:
          - PolicyDocument:
              Version: "2012-10-17"
              Statement:
                Effect: Allow
                Action: firehose:PutRecord
                Resource: "*"
            PolicyName: API-Firehose
    
    # Role for firehose with S3 Destination and Lambda transformation
    FirehosePutS3Role:
      Type: AWS::IAM::Role
      Properties:
        RoleName: Firehose-PutS3
        AssumeRolePolicyDocument: 
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Principal:
                Service: firehose.amazonaws.com
              Action:
                - sts:AssumeRole
        Policies:
          - PolicyName: Firehose-Put-S3
            PolicyDocument: 
              Version: "2012-10-17"
              Statement:
                - Effect: Allow
                  Action:
                    - s3:AbortMultipartUpload
                    - s3:GetBucketLocation
                    - s3:GetObject
                    - s3:ListBucket
                    - s3:ListBucketMultipartUploads
                    - s3:PutObject
                    - s3:PutObjectAcl
                  Resource:
                    - !GetAtt DatalakeBucket.Arn
                    - !Join 
                      - /
                      - - !GetAtt DatalakeBucket.Arn
                        - "*"
          - PolicyName: Firehose-Invoke-Lambda
            PolicyDocument: 
              Version: "2012-10-17"
              Statement:
                - Effect: Allow
                  Action:
                    - lambda:InvokeFunction
                    - lamdba:GetFunctionConfiguration
                  Resource: !GetAtt TransformLambdaFunction.Arn

    DatalakeBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:service}-${sls:stage}-datalake

    DeliveryStream:
      Type: AWS::KinesisFirehose::DeliveryStream
      Properties:
        DeliveryStreamName: ${self:service}-${sls:stage}-delivery-stream
        DeliveryStreamType: DirectPut
        ExtendedS3DestinationConfiguration:
          BucketARN: !GetAtt DatalakeBucket.Arn
          RoleARN: !GetAtt FirehosePutS3Role.Arn
          ProcessingConfiguration:
            Enabled: true
            Processors:
              - Type: Lambda
                Parameters:
                  - ParameterName: LambdaArn
                    ParameterValue: !GetAtt TransformLambdaFunction.Arn

    RestApi:
      Type: AWS::ApiGateway::RestApi
      Properties:
        Name: clickstream-ingest-poc
      
    PostDataAPIMethod:
      Type: AWS::ApiGateway::Method
      Properties:
        RestApiId: !Ref RestApi
        ResourceId: !GetAtt RestApi.RootResourceId
        HttpMethod: POST
        AuthorizationType: NONE
        Integration:
          Type: AWS
          Credentials: !GetAtt ApiGatewayFirehoseRole.Arn
          IntegrationHttpMethod: POST
          Uri: arn:aws:apigateway:${aws:region}:firehose:action/PutRecord
          RequestTemplates:
            application/json: !Sub
              - | # multiline string
                {
                    "DeliveryStreamName": "${stream_name}",
                    "Record": {
                        "Data": "$util.base64Encode($util.escapeJavaScript($input.json('$')).replace('\', ''))"
                    }
                }
              - stream_name: !Ref DeliveryStream
          IntegrationResponses:
            - StatusCode: '200'
              ResponseTemplates:
                application/json: '{"status": "OK"}'
        MethodResponses:
          - StatusCode: '200'

    ApiDeployment:
      Type: AWS::ApiGateway::Deployment
      Properties:
        RestApiId: !Ref RestApi
        StageName: ${sls:stage}
      DependsOn: PostDataAPIMethod

    # Glue resources to query table in Athena
    ClickstreamDatabase:
      Type: AWS::Glue::Database
      Properties:
        CatalogId: ${aws:accountId}
        DatabaseInput:
          Name: ${self:service}-${sls:stage}-db
          Description: Database to hold clickstream data

    ClicksteamTable:
      Type: AWS::Glue::Table  
      Properties:
        CatalogId: ${aws:accountId}
        DatabaseName: !Ref ClickstreamDatabase
        TableInput:
          TableType: EXTERNAL_TABLE # This value is important to query from Athena
          Name: ${self:service}-${sls:stage}-clickstream
          PartitionKeys:
            - Name: datehour
              Type: string
          Parameters:
            projection.enabled: true
            projection.datehour.type: date
            projection.datehour.format: yyyy/MM/dd/HH
            projection.datehour.range: 2021/01/01/00,NOW
            projection.datehour.interval: '1'
            projection.datehour.interval.unit: HOURS
            storage.location.template: !Sub 
              - s3://${bucket}/${!datehour}
              - bucket: !Ref DatalakeBucket
          StorageDescriptor:
            Columns:
              - Name: element_clicked
                Type: string
              - Name: time_spent
                Type: int
              - Name: source_menu
                Type: string
              - Name: created_at
                Type: string
            Location: !Sub
              - s3://${bucket}/
              - bucket: !Ref DatalakeBucket
            SerdeInfo:
              SerializationLibrary: org.openx.data.jsonserde.JsonSerDe
              Parameters: 
                paths: 'element_clicked, time_spent, source_menu, created_at'
            InputFormat: org.apache.hadoop.mapred.TextInputFormat
            OutputFormat: org.apache.hadoop.hive.ql.io.IgnoreKeyTextOutputFormat
      DependsOn: ClickstreamDatabase

  Outputs:
    Endpoint: 
      Value: !Sub
      - https://${api_id}.execute-api.${region}.amazonaws.com/${stage}
      - api_id: !Ref RestApi
        region: ${aws:region}
        stage: ${sls:stage}
